#+TITLE: Emacs and Ruby

* Intro
#+BEGIN_QUOTE
Emacs outshines all other editing software in approximately the same
way that the noonday sun does the stars. It is not just bigger and
brighter; it simply makes everything else vanish.

-- Neal Stephenson, "[[http://www.cryptonomicon.com/beginning.html][In the Beginning was the Command Line]]"
#+END_QUOTE

** Prerequisites
   First things first. I expect you to already be an emacs user. This
   is not an emacs tutorial. Second, the tools and code give in this
   book are only guaranteed to work on emacs 24 and higher. Lastly,
   this isn't a book on rails. This book will cover general ruby
   programming.
** Yukihiro Matsumoto
   Matz, the creator of ruby, is an emacs user.[fn:1] He mentioned in
   a talk that emacs had a enfluence over the design of ruby.[fn:2]
** What we are trying to achieve
* Projectile
  [[http://batsov.com/projectile/][home page]]
  [[https://github.com/bbatsov/projectile][github link]]
* rbenv.el

  When I first started programming, it was common to use the system
  ruby. You could download the source for a new ruby version and link
  the new binaries to a directory in you path. This was fine but if
  you had more than two extra rubys, this became very cumbersome to
  deal with.

  Then came the ruby environment managers.
  - [[https://github.com/rvm/rvm][rvm]]
  - [[https://github.com/postmodern/chruby][chruby]]

  My favorite is [[https://github.com/rbenv/rbenv][rbenv]]. There is an emacs package for rbenv called
  [[https://github.com/senny/rbenv.el][rbenv.el]]. rbenv.el lets you use whichever ruby you have in
  rbenv. Also when =rbenv-use-global= is loaded it will default to the
  whatever ruby is set as global in rbenv.

  The interactive commands for rbenv.el are:

  - global-rbenv-mode :: use rbenv to configure the ruby version used by your Emacs.
  - rbenv-use-global :: activate rbenv global ruby
  - rbenv-use :: choose what ruby you want to activate
  - rbenv-use-corresponding :: search for .ruby-version and activate the corresponding ruby

** eshell
* ruby-mode
* smart-parans
* Seeing Is Believing
  [[https://github.com/JoshCheek/seeing_is_believing][github link]]

  #+NAME: Emacs Integration
  #+BEGIN_SRC elisp
    (defun seeing-is-believing ()
      "Replace the current region (or the whole buffer, if none) with the output
    of seeing_is_believing."
      (interactive)
      (let ((beg (if (region-active-p) (region-beginning) (point-min)))
            (end (if (region-active-p) (region-end) (point-max)))
            (origin (point)))
        (shell-command-on-region beg end "seeing_is_believing" nil 'replace)
        (goto-char origin)))
  #+END_SRC
* yasnippet
* Testing
* Magit
  Although not part of ruby, magit is a great interface to git and is
  worth learning.

* Footnotes

[fn:1] http://www.slideshare.net/yukihiro_matz/how-emacs-changed-my-life

[fn:2] So much that writing ruby-mode in emacs influenced the syntax of ruby
